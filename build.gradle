import java.util.regex.Matcher

//noinspection GroovyAssignabilityCheck
group 'org.zowe.utility_tools'

buildscript {
    ext {
        licenseGradlePluginVerion = '0.13.1'
    }

    ext.mavenRepositories = {
    	mavenLocal()
        maven {
            url artifactoryMavenSnapshotRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
        maven {
            url artifactoryMavenRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
    }

    repositories mavenRepositories

    dependencies {
        classpath 'net.researchgate:gradle-release:2.7.0'
        classpath 'com.palantir:jacoco-coverage:0.4.0'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:${licenseGradlePluginVerion}"
    }
}

ext.npmProjects = [
    'fconv',
    'njq',
    'config-converter',
    'ncert',
]

apply plugin: 'com.palantir.jacoco-full-report'
apply from: 'gradle/publish.gradle'
apply from: 'gradle/coverage.gradle'
apply from: 'gradle/versions.gradle'
apply from: 'gradle/code-quality.gradle'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'com.github.hierynomus.license'

    repositories mavenRepositories

    sourceCompatibility = 1.8
    version = version

    idea {
        module {
            //noinspection GroovyAssignabilityCheck
            outputDir file('build/classes/main')
            //noinspection GroovyAssignabilityCheck
            testOutputDir file('build/classes/test')
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

subprojects {
    license {
        header rootProject.file('.license/LICENSE_HEADER')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        excludes(["**/*.json", "**/static", "**/*.txt", "**/*.p12", "**/*.xml", "**/*.jsp", "**/*.html", "**/*.jks"])
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
        skipExistingHeaders = true
    }

    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors()
    }

}

task jacocoSubProjects() {
    subprojects.findAll { it.name in javaProjectsWithUnitTests }.each { dependsOn("${it.name}:jacocoTestReport") }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
    }
}

task mergeCoverage() {
    dependsOn test, jacocoFullReport
}

task coverage() {
    mergeCoverage.mustRunAfter jacocoSubProjects
    dependsOn mergeCoverage, jacocoSubProjects, jacocoTestReport, ":fconv:runTests", ":config-converter:runTests", ":njq:runTests", ":ncert:runTests"
}

task npmPackAll() {
    subprojects.findAll { it.name in npmProjects }.each { dependsOn("${it.name}:npmPack") }
}

task npmLintAll() {
    subprojects.findAll { it.name in npmProjects }.each { dependsOn("${it.name}:npmLint") }
}

//-----------Release part start
//
// for this project, the release artifacts are built and published outside the gradle scripts. 
// This should just increment the project version and tag the release.
apply plugin: 'net.researchgate.release'

ext.releaseScope = project.hasProperty('release.scope') ? project.getProperty('release.scope') : 'patch'

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = false
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = '[Gradle Release plugin]'
    preTagCommitMessage = '[skip ci] Before tag commit'
    tagCommitMessage = 'Release:'
    tagTemplate = 'v${version}'
    newVersionCommitMessage = 'Create new version:'
    versionPropertyFile = 'gradle.properties'

    if (releaseScope == 'minor') {
        versionPatterns = [
            /[.]*\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll(".${(m[0][1] as int) + 1}.0") }
        ]
    } else if (releaseScope == 'major') {
        versionPatterns = [
            /(\d+)\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}.0.0") }
        ]
    } else {
        versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
        ]
    }

    scmAdapters = [
        net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = ''
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = true
        signTag = false
    }
}
//-----------Release part end